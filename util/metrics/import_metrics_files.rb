# frozen_string_literal: true

require "optparse"

# This script is intended to be run on a puppet infrastructure node that had the puppet_metrics_collector
# module installed and running.  Given a time window it will collect the json files generated by the
# puppet_metrics_collector module and tar them into the tar file.  This includes jsons that are in tar
# files already.  Those will be extracted and included if they are in the time window.

# General namespace for metrics module
module Metrics
  # Main class for collecting metrics files into a tar file
  #
  # @author Randell Pelak
  #
  # @attr [integer] start_epoch Epoch seconds for the start of the collection window
  # @attr [integer] end_epoch Epoch seconds for the end of the collection window
  # @attr [string] metrics_dir The "output directory" of the metrics collector puppet module
  # @attr [string] output_dir The directory to place the tarfile in.
  # @attr [string] tar_file_name Name of the tar file to create with the metrics
  # @attr [boolean] verbose Verbose output
  # @attr [integer] poll_interval The "collection_frequency" of the metrics collector puppet module
  # @attr [integer] archive_interval The frequency of the *_metrics_dir cron job for the metrics
  #   collector module.  This is how often it tars up the json files.
  #
  class ImportMetricsFiles
    # TODO: make this optional?
    JSON2GRAPHITE_PATH = "~/git/puppet-metrics-viewer/json2graphite.rb"

    # Initialize class
    #
    # @author Bill Claytor
    #
    # @param [string] results_dir The GPLT results directory to process
    # @param [string] prefix The prefix to use when building the server tag
    #
    # @return [void]
    #
    # @example
    #   initialize(results_dir, prefix)
    #
    def initialize(results_dir, prefix)
      @results_dir = results_dir
      @prefix = prefix
      @id = @results_dir.split("_").last
    end

    # The main entry point to the import_metrics_files script
    #
    # @author Bill Claytor
    #
    # @return [void]
    #
    # @example
    #   import_metrics_files
    #
    def import_metrics_files
      pmc_dir = "#{@results_dir}/puppet-metrics-collector"
      raise "Directory not found: #{pmc_dir}" unless File.directory? pmc_dir

      puts "Importing puppet_metrics_collector files:"
      puts " results_dir: #{@results_dir}"
      puts " prefix: #{@prefix}"
      puts " id: #{@id}"

      service_dirs = Dir.glob("#{pmc_dir}/*").select { |f| File.directory? f }

      puts " service directories:"
      puts service_dirs
      puts

      # each service directory
      service_dirs.each do |service_dir|
        puts "Checking directory: #{service_dir}"

        # each host directory
        host_dirs = Dir.glob("#{service_dir}/*").select { |f| File.directory? f }

        puts " host directories: "
        puts host_dirs
        puts

        host_dirs.each do |host_dir|
          import_metrics_files_for_host_dir(host_dir)
        end
      end
    end

    # Calls the json2graphite.rb script for the specified host directory
    # with a server tag using the following pattern: prefix_id_hostname
    #
    # @author Bill Claytor
    #
    # @param [string] host_dir The host directory to import
    #
    # @return [void]
    #
    # @example
    #   import_metrics_files
    #
    def import_metrics_files_for_host_dir(host_dir)
      hostname = File.basename host_dir
      server_tag = "#{@prefix}_#{@id}_#{hostname}"
      pattern = "'#{host_dir}/*.json'"
      cmd = "ruby #{JSON2GRAPHITE_PATH} --pattern #{pattern}" \
        " --convert-to influxdb --netcat localhost --influx-db puppet_metrics --server-tag #{server_tag}"
      puts "Importing puppet-metrics-collector files for host: #{hostname}"
      puts " cmd: #{cmd}"
      puts

      `#{cmd}`
    end
  end
end

if $PROGRAM_NAME == __FILE__

  DESCRIPTION = <<~DESCRIPTION
    This script imports metrics collector data for the Standard and Large reference architectures.
    It checks each service subdirectory of the puppet-metrics-collector directory and calls the json2graphite.rb script once for each host subdirectory found within.
    The server tags are constructed using the following pattern:
    prefix_id_hostname

    For example:
    be ruby util/metrics/import_metrics.rb -r results/scale/PERF_SCALE_12345 -p slv-649

    This will result in the following server tags:
    slv-649_12345_127.0.0.1
    slv-649_12345_ip-10-227-0-22.amz-dev.puppet.net
    slv-649_12345_ip-10-227-2-173.amz-dev.puppet.net

  DESCRIPTION

  options = {}

  # Note: looks like 'Store options to a Hash' doesn't work in Ruby 2.3.0.
  # https://ruby-doc.org/stdlib-2.6.3/libdoc/optparse/rdoc/OptionParser.html
  #  `end.parse!(into: options)`
  # TODO: update to use '(into: options)' after Ruby update
  OptionParser.new do |opts|
    opts.banner = "Usage: import_metrics_files.rb [options]"

    opts.on("-h", "--help", "Display the help text") do
      puts DESCRIPTION
      puts opts
      exit
    end

    opts.on("-r", "--results_dir RESULTS_DIR", String, "The results directory to process") do |results_dir|
      options[:results_dir] = results_dir
    end

    opts.on("-p", "--prefix PREFIX", String, "The prefix to use when building the server tag") do |prefix|
      options[:prefix] = prefix
    end
  end.parse!

  raise "A results directory must be specified with the -r or --results_dir option" if options[:results_dir].nil?
  raise "A prefix must be specified with the -p or --prefix option" if options[:prefix].nil?

  raise "Specified directory does not exist: #{options[:results_dir]}" unless File.directory? options[:results_dir]

  obj = Metrics::ImportMetricsFiles.new(options[:results_dir], options[:prefix])
  obj.import_metrics_files
end
